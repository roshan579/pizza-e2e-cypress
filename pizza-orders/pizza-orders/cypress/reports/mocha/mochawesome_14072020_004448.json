{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2020-07-13T20:33:31.911Z",
    "end": "2020-07-13T20:44:48.427Z",
    "duration": 676516,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "090be879-5dbd-4843-84c7-cdb0fb5200df",
      "title": "",
      "fullFile": "cypress\\integration\\PizzaOrder.feature",
      "file": "cypress\\integration\\PizzaOrder.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
          "title": "Pizza Order",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "do pizza order end to end with create accept and complete actions (example #1)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #1)",
              "timedOut": null,
              "duration": 59547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ca16352e-dc25-4f1a-ba6f-17320b212298",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #2)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #2)",
              "timedOut": null,
              "duration": 59450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a3ce801f-22e8-4cfd-9517-3710e1e88b32",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #3)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #3)",
              "timedOut": null,
              "duration": 57239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "59b028d2-32cd-485c-a8a2-7e35d62d8c16",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #4)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #4)",
              "timedOut": null,
              "duration": 54272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f322141a-2d1c-4b35-9378-de5e6c37f5c6",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #5)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #5)",
              "timedOut": null,
              "duration": 58029,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "71f4ed0a-0295-4e0f-982a-30a5f8d90593",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #6)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #6)",
              "timedOut": null,
              "duration": 57686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b73d2997-47fe-4423-9f24-011ab74eb36a",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #7)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #7)",
              "timedOut": null,
              "duration": 58691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1c9390aa-df5d-4593-b553-db2cbf92552a",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #8)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #8)",
              "timedOut": null,
              "duration": 56368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6fa21a1f-8bb5-44f2-83a4-0a9c3aff3fcd",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #9)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #9)",
              "timedOut": null,
              "duration": 56205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "35615343-e967-43d3-ae7b-ee7a83fe5b8d",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #10)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #10)",
              "timedOut": null,
              "duration": 46808,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e576558e-a999-44ee-88d9-0a8768608f85",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #11)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #11)",
              "timedOut": null,
              "duration": 50711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "501ba3a7-fb0e-4fd6-9937-5160cc0cee90",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "do pizza order end to end with create accept and complete actions (example #12)",
              "fullTitle": "Pizza Order do pizza order end to end with create accept and complete actions (example #12)",
              "timedOut": null,
              "duration": 56991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "39e21504-cc30-4272-b6df-63676a0be9c8",
              "parentUUID": "292f6e54-1a38-415e-840b-9ea6d8a4cb36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca16352e-dc25-4f1a-ba6f-17320b212298",
            "a3ce801f-22e8-4cfd-9517-3710e1e88b32",
            "59b028d2-32cd-485c-a8a2-7e35d62d8c16",
            "f322141a-2d1c-4b35-9378-de5e6c37f5c6",
            "71f4ed0a-0295-4e0f-982a-30a5f8d90593",
            "b73d2997-47fe-4423-9f24-011ab74eb36a",
            "1c9390aa-df5d-4593-b553-db2cbf92552a",
            "6fa21a1f-8bb5-44f2-83a4-0a9c3aff3fcd",
            "35615343-e967-43d3-ae7b-ee7a83fe5b8d",
            "e576558e-a999-44ee-88d9-0a8768608f85",
            "501ba3a7-fb0e-4fd6-9937-5160cc0cee90",
            "39e21504-cc30-4272-b6df-63676a0be9c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 671997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "ddmmyyyy_HHMMss"
      },
      "version": "5.1.0"
    }
  }
}